# Default values for nacos.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

statefulset:
  enabled: true

## By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25% .
## You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 25%
  # type: RollingUpdate

# 副本个数
replicaCount: 3

# 容器image及tag
image:
  repository: nacos/nacos-server
  tag: 1.1.0
  pullPolicy: IfNotPresent # IfNotPresent: 有则不拉（减少流量和操作步骤），Always: 不管tag总拉（适合tag不变时更新）
  imagePullSecrets: {}   # 如果需要docker仓库验证

service:
  type: ClusterIP  # 一般不用修改
  ports:
    web:  # 多端口暴露时，复制一段，ingress默认只暴露此名为web的端口
      port: 8848  # Service port number for client-a port.
      protocol: TCP  # Service port protocol for client-a port.
#    ssh:
#      port: 22  # Service port number for client-b port.
#      protocol: TCP  # Service port protocol for client-b port.
#
## env set
## ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: 
  - name: PREFER_HOST_MODE
    value: "hostname"
  # - name: NACOS_SERVER_PORT
  #   value: "8848"

## command set
startCommand: []
#  - "java -Xdebug -Xnoagent -Djava.compiler=NONE"
#  - "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"
#  - "-Djava.security.egd=file:/dev/urandom"
#  - "-jar /test.jar"
#  - "-Duser.timezone=GMT+08"


## Enable configmap and add data in configmap
config:
  enabled: false
  mountPath: /conf
  data: 

## To use an additional secret, set enable to true and add data
secret:
  enabled: false
  mountPath: /etc/secret-volume
  readOnly: true
  data: 

## liveness and readiness 
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
healthCheck:
  enabled: true
  type: http  # http/tcp
  port: web  # 上面的端口名或端口
  readinessPath: '/nacos/v1/console/health/readiness'  # http时必须设置
  livenessPath: '/nacos/v1/console/health/liveness'  # http时必须设置
  livenessInitialDelaySeconds: 60  # 初始延迟秒数
  livenessPeriodSeconds: 5  # 检测周期，默认值5，最小为1
  readinessInitialDelaySeconds: 60  # 初始延迟秒数
  readinessPeriodSeconds: 5   # 检测周期，默认值5，最小为1
 
resources:
  # 容器资源设置
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 500m
    memory: 2Gi

## Node labels and tolerations for pod assignment
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
labels: {}
podAnnotations:
  pod.alpha.kubernetes.io/initialized: "true"
nodeSelector: {}
tolerations: []
affinity: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistentVolume:   # 是否存储持久化
  enabled: true
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  storageClass: "cephfs"  # 可选，ceph-rbd（默认）和cephfs（可多pod共享存储）
  accessMode: ReadWriteMany
  annotations: {}
    # helm.sh/resource-policy: keep
  size: 5Gi  # 大小
  existingClaim: {}  # 使用已存在的pvc
  mountPaths:
    - mountPath: /home/nacos/plugins
      name: data-storage
      subPath: plugins
    - mountPath: /home/nacos/data
      name: data-storage
      subPath: data
    - mountPath: /home/nacos/logs
      name: data-storage
      subPath: logs

ingress:  # 是否使用nginx暴露域名或端口
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /nacos
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

mysql:
  # if enabled set "false", fill the connection informations in "external" section
  # init containers will import the flow sql file into mysql db.
  # https://raw.githubusercontent.com/alibaba/nacos/${version}/distribution/conf/schema.sql
  # https://raw.githubusercontent.com/alibaba/nacos/${version}/distribution/conf/nacos-mysql.sql
  enabled: false
  external:
    mysql.master.host: "mysql_master_host"
    mysql.master.db.name: "nacos"
    mysql.master.port: "3306"
    mysql.master.user: "nacos"
    mysql.master.password: "nacos"
    mysql.slave.host: "mysql_slave_host"
    mysql.slave.port: "3306"

  root:
    password: nacos
    forcePassword: false
  
  db:
    user: nacos
    password: nacos
    name: nacos
    forcePassword: false
  
  replication:
    enabled: true
    user: replicator
    password: replicator
    forcePassword: false
  
  master:
    persistence:
      enabled: true
      storageClass: "ceph-rbd"
      mountPath: /bitnami/mysql
      annotations:
      accessModes:
      - ReadWriteOnce
      size: 8Gi
  
    config: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      init-connect='SET NAMES utf8mb4'
      collation-server = utf8mb4_unicode_ci
      max_connections = 5000
      query_cache_type = 1
      query_cache_size = 128M
      query_cache_limit = 4M
      key_buffer_size = 256M
      slow_query_log = 1
      long_query_time = 2
      slow_query_log_file=slow-query.log
      log_warnings = 1
  
      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
  
      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
  
  slave:
    replicas: 1
    persistence:
      enabled: true
      storageClass: "ceph-rbd"
      mountPath: /bitnami/mysql
      annotations:
      accessModes:
      - ReadWriteOnce
      size: 8Gi
  
    config: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      init-connect='SET NAMES utf8mb4'
      collation-server = utf8mb4_unicode_ci
      max_connections = 5000
      query_cache_type = 1
      query_cache_size = 128M
      query_cache_limit = 4M
      key_buffer_size = 256M
      slow_query_log = 1
      long_query_time = 2
      slow_query_log_file=slow-query.log
      log_warnings = 1
  
      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
  
      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
  
  metrics:
    enabled: false
    image:
      registry: docker.io
      repository: prom/mysqld-exporter
      tag: v0.10.0
      pullPolicy: IfNotPresent
    resources: {}
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"

## Add init containers. e.g. to be used to give specific permissions for data
## Add your own init container or uncomment and modify the given example.
initContainers: []

deployment:
## Add annotations in deployment to enhance deployment configurations
  annotations: {}
  postStart:
    command:    # '["/bin/sh", "-c", "ls"]'
  additionalContainers: 
  additionalVolumes: 

## Prometheus Exporter / Metrics
##
metrics:
  enabled: false
  image:
    registry: docker.io
    repository: nginx/nginx-prometheus-exporter
    tag: 0.1.0
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName
  ## Metrics exporter pod Annotation and Labels
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
    ## Metrics exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
  # resources: {}

extraContainers: {}
  ## Additional containers to be added to the controller pod.
  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
#  - name: my-sidecar
#    image: nginx:latest
#  - name: lemonldap-ng-controller
#    image: lemonldapng/lemonldap-ng-controller:0.2.0
#    args:
#      - /lemonldap-ng-controller
#      - --alsologtostderr
#      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
#    env:
#      - name: POD_NAME
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.name
#      - name: POD_NAMESPACE
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.namespace
#    volumeMounts:
#    - name: copy-portal-skins
#      mountPath: /srv/var/lib/lemonldap-ng/portal/skins
